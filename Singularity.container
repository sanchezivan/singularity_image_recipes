Bootstrap: docker
From: centos

%setup
   # setup is run after the base 'centos' image is
   # downloaded and upacked but before entering the 
   # container environment
   
   # this is the path on the local system to 
   # what will become your container's root directory
   echo ${SINGULARITY_ROOTFS}
   # create a directory for your application
   #
   # copy the hello world example from the github to 
   # the app directory

%post
   # post is run after entering the container env. 

   # silvio
   # directory structure:
   # /sensei
   # /sensei/build
   # /sensei/src
   # /sensei/install

   # silvio
   # build directory structure
   mkdir /sensei
   mkdir /sensei/build
   mkdir /sensei/src
   mkdir /sensei/install
 
   
   # need to install some development tools to
   # build our code
   yum update -y
   yum groupinstall -y "Development Tools"
   yum install -y gcc g++
   yum install sudo -y
   yum install -y ncurses-devel
   yum install -y wget
   yum install  xorg-x11-server-Xorg xorg-x11-xauth xorg-x11-apps -y
   yum install -y libXt-devel
   yum install -y freeglut-devel
   yum install -y automake
   yum install -y vim


   # CMake 3.12.3
 
   cd /sensei/src
   wget https://cmake.org/files/v3.12/cmake-3.12.3.tar.gz
   tar zxvf cmake-3.*
   rm cmake-3.12.3.tar.gz
   cd cmake-3.12.3
   ./bootstrap --prefix=/sensei/install/cmake
   make -j4
   make install

   # add all the binaries we will build to the path
   export PATH=/sensei/install/cmake/bin:$PATH

   
   # VTK

   cd /sensei/src
   git clone https://gitlab.kitware.com/vtk/vtk.git
   cd vtk
   git checkout v8.2.0

   cd /sensei/build
   mkdir vtk
   cd vtk

   cmake \
 	-DVTK_BUILD_TESTING:STRING=OFF \
	-DCMAKE_INSTALL_PREFIX=/sensei/install/vtk \
   /sensei/src/vtk 
   
   make -j4
   make install 

   
   # MPICH
   
   cd /sensei/src
   wget -q http://www.mpich.org/static/downloads/3.2.1/mpich-3.2.1.tar.gz
   tar xf mpich-3.2.1.tar.gz
   rm mpich-3.2.1.tar.gz
   cd mpich-3.2.1
   # disable the addition of the RPATH to compiled executables
   # this allows us to override the MPI libraries to use those
   # found via LD_LIBRARY_PATH
   ./configure --prefix=/usr/local/mpich/install --disable-wrapper-rpath
   make -j4 
   make install
   # add to local environment to build pi.c
   export PATH=$PATH:/usr/local/mpich/install/bin
   export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/mpich/install/lib

          
   # ADIOS
   # Silvio
   # no adios for now

   #cd ${SINGULARITY_ROOTFS}/sensei/src
   #wget https://users.nccs.gov/~pnorbert/adios-1.13.1.tar.gz
   #tar zxf adios-1.13.1.tar.gz
   
   #cd adios-1.13.1
   #wget http://ftp.gnu.org/gnu/automake/automake-1.13.tar.gz
   #tar xf automake-1.13.tar.gz
   #cd automake-1.13
   #./configure
   #make
   #make install
   #cd ..
   
   # This installs MXML (needed to complete ADIOS installation)
   #wget https://github.com/michaelrsweet/mxml/releases/download/release-2.9/mxml-2.9.tar.gz
   #tar xf mxml-2.9.tar.gz
   #cd mxml-2.9
   #./configure
   #make
   #make install
   #cd ..
   #mkdir build
   #cd build
   #../configure -prefix=/root/adios-1.13.1/build CFLAGS="-fPIC"
   #make
   #make install
   
   # Installing SENSEI

   cd /sensei/src
   git clone https://github.com/Kitware/sensei.git

   cd /sensei/build
   mkdir sensei
   cd sensei

   #echo "set_property(TARGET parallel3d PROPERTY C_STANDARD 99)" >> CMakeLists.txt
   #mkdir build
   #cd build/
   
   #cmake -DENABLE_SENSEI=ON -DENABLE_ADIOS=ON -DVTK_DIR=OFF -DADIOS_DIR=/root/adios-1.13.1/build  ..

   cmake \
	-DENABLE_SENSEI=ON \
	-DCMAKE_INSTALL_PREFIX=/sensei/install/sensei \
	-DVTK_DIR=/sensei/install/vtk/lib/cmake/vtk-8.2 \
   /sensei/src/sensei
 
   make -j4
   make install

      # enter directory where source file was copied
   #cd /myapp
   
   # build
   # g++ -o hello_world hello_world.cpp

%runscript
   # run script
   # /myapp/hello_world

%environment
   # can define runtime environment variables here
   # these vars will be set during calls to 'shell'
   # or 'exec' or 'run' but will not be set during
   # the previous 'post' section of the recipe file
   # so, if you need them, define them there as well
   
   #export PATH=/usr/local/mpich/install/bin/:${PATH}
   #export LD_LIBRARY_PATH=/usr/local/mpich/install/lib/:${LD_LIBRARY_PATH}
   #export PATH=$PATH:/myapp
